# -*- coding: utf-8 -*-
"""Mi'kMaq_Language_Research_v.2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mNW7ADEkziK5nrjKr9_arYlg7tZWmzIF
"""

!pip install openai -q

"""All words used in this project are sourced directly from [Mi'gmaq Mi'kmaq Micmac Online](https://www.mikmaqonline.org/). 

The talking dictionary project is developing an Internet resource for the Mi'gmaq/Mi’kmaq language. Each headword is recorded by a minimum of three speakers. Multiple speakers allow one to hear differences and variations in how a word is pronounced. Each recorded word is used in an accompanying phrase. This permits learners the opportunity to develop the difficult skill of distinguishing individual words when they are spoken in a phrase.
Thus far we have posted 6500 headwords, a majority of these entries include two to three additional forms.

The project was initiated in Listuguj, therefore all entries have Listuguj speakers and Listuguj spellings. In collaboration with Unama'ki, the site now includes a number of recordings from Unama'ki speakers. More will be added as they become available.

The orthographies (spelling system):
Each word is presented using the Listuguj orthography. The Smith-Francis orthography will be included in the future. Some spellings are speculative.
Listuguj is in the Gespe'g territory of the Mi'gmaw; located on the southwest shore of the Gaspè peninsula.

Unama'ki is a Mi’gmaw territory; in English it is known as Cape Breton. 



"""

import openai
import pandas as pd
import numpy as np
from getpass import getpass

openai.api_key = getpass()



"""The Mi'kmaq language has twenty-one words for the word '**play**'. I define the words in a CSV file called mikmaq-langugage-play.csv."""

df = pd.read_csv('mikmaq-language-play.csv')
print(df)

"""I take the phrase written in Mi'kmaq. **Newtigisg'g gisitu'a'ti'tis, newtigisg'g tu'a'ti'tis** and convert it into numeric form and embed it within a vector space.

In English it is translated as: **If they could play ball all day, they would play ball all day**

Periods are omitted from this search.
"""

from openai.embeddings_utils import get_embedding

df['embedding'] = df['text'].apply(lambda x: get_embedding(x, engine='text-embedding-ada-002'))
df.to_csv('word_embeddings.csv')

get_embedding("Newtigisg'g gisitu'a'ti'tis, newtigisg'g tu'a'ti'tis", engine='text-embedding-ada-002')

"""The above words are converted to numerical values and defined within a vector.
A new CSV file is generated that has updated vector information and saved as word_embeddings.csv.

The words in Mi'kmaq are assigned numeric vector information. Below, the Mi'kmaq words and their assigned vector values are displayed.
"""

df = pd.read_csv('word_embeddings.csv')
df['embedding'] = df['embedding'].apply(eval).apply(np.array)
df

"""We can enter a word or term to find similarity. This is tested using the english word '**play**'. The program will semantically search against the previous embedded Mi'kmaq words using OpenAI Word Embedding."""

search_term = input('Enter a search term: ')

"""The words entered above are converted into a vector. Below are the values for the searched term."""

# semantic search
search_term_vector = get_embedding(search_term, engine="text-embedding-ada-002")
search_term_vector

"""# Mi'kmaq words are converted to a numerical form and embedded into a vector space.

The word or term is then compared to the Mi'kmaq word for play in a vector space using Cosine Similarity.
"""

from openai.embeddings_utils import cosine_similarity

df["similarities"] = df['embedding'].apply(lambda x: cosine_similarity(x, search_term_vector))

df

"""# The top 5 Mi'kmaq words that are similar to the term: '*I want to play ball'* in vector space are the following words:

getmete'gl (win all/break all/destroy all)

mila'sualatl (plays with/toy with)

papit (amuse self)

mila'suaqan (toy)

mila'suatg (plays with/toy with)

# **All words for Play defined**

 awanmila'sit (plays poorly)

elaqalsewatl (play a gambling game for/play for (in cards and board games)

elutuatl (impersonate/imitate)

ge'gutesing (land on top/jump on top)

getmete'gl (win all/break all/destroy all)

gise'g (have good time/have fun/fun to be with/enjoyable)

giso'qon (fun time/lots of fun! (interjection))

maligeiwatl (play with/amuse)

maligo'tg (play with/amuse)

mattaqta'tl (pluck (as string)/tug (a string)/pull (a string)/jerk (a string))

mila'sit (play)

mila'sualatl (plays with/toy with)

mila'suaqan (toy)

mila'suatg (plays with/toy with)

nuja'q (swimmer)

papit (amuse self)

papitaqan (toy/item made for enjoyment)

papuaqan (amusement/fun time/celebration)

tu'at (play baseball/play ball)

wali'j (snowball)

wigji'jaqan (toy)



"""

df.sort_values("similarities", ascending=False).head(20)

"""Using the vector ID for awanmila'sit (plays poorly) and tu'at (play baseball/play ball), I then use the two words together to establish an updated vector association when adding new context to the search.

An action_vector and object_vector are defined for maths.

"""

play_df = df.copy()

action_vector = play_df['embedding'][0]
object_vector = play_df['embedding'][18]

action_object_vector = action_vector + object_vector
action_object_vector



"""# Words used: awanmila'sit + tu'at.
---

The words most associate via vector space are:

mila'suaqan (toy)

mila'suatg (plays with/toy with)

mila'sit (play)

mila'sualatl (plays with/toy with)

elutuatl (impersonate/imitate)
"""

play_df["similarities"] = play_df['embedding'].apply(lambda x: cosine_similarity(x, action_object_vector))
play_df.sort_values("similarities", ascending=False)

"""The english equivilent words in Mi'kmaq are introduced """

action_object_df = pd.read_csv('english-language-play.csv')
action_object_df

action_object_df['embedding'] = action_object_df['text'].apply(lambda x: get_embedding(x, engine='text-embedding-ada-002'))
action_object_df.to_csv('Sentence-play-embeddings.csv')

"""The phrase used above is re-entered to update the vector association and how the phrase associates with the word 'Play' written in Mi'kmaq and find an association when comparing the vector space for the Mi'kmaq and English equivalent."""

action_object_search = input("Enter word or phrase:")



"""An update vector space is generated with knowledge of Mi'kmaq and English equivalent words and meanings."""

action_object_search_vector = get_embedding(action_object_search, engine="text-embedding-ada-002")
action_object_search_vector

"""The English words are then converted into a numerical form and embedded into a vector space."""

action_object_df["similarities"] = action_object_df['embedding'].apply(lambda x: cosine_similarity(x, action_object_search_vector))

action_object_df

"""# **All Mi'kmaq words for Play**
awanmila'sit (plays poorly)

elaqalsewatl (play a gambling game for/play for (in cards and board games)

elutuatl (impersonate/imitate)

ge'gutesing (land on top/jump on top)

getmete'gl (win all/break all/destroy all)

gise'g (have good time/have fun/fun to be with/enjoyable)

giso'qon (fun time/lots of fun! (interjection))

maligeiwatl (play with/amuse)

maligo'tg (play with/amuse)

mattaqta'tl (pluck (as string)/tug (a string)/pull (a string)/jerk (a string))

mila'sit (play)

mila'sualatl (plays with/toy with)

mila'suaqan (toy)

mila'suatg (plays with/toy with)

nuja'q (swimmer)

papit (amuse self)

papitaqan (toy/item made for enjoyment)

papuaqan (amusement/fun time/celebration)

tu'at (play baseball/play ball)

wali'j (snowball)

wigji'jaqan (toy)

The English words in the order that is most similar to with knowledge of English and Mi'kmaq equavilent.
"""

action_object_df.sort_values("similarities", ascending=False)

v1 = np.array([1,2,3])
v2 = np.array([4,5,6])

# (1 * 4) + (2 * 5) + (3 * 6)
dot_product = np.dot(v1, v2)
dot_product

# square root of (1^2 + 2^2 + 3^2) = square root of (1+4+9) = square root of 14
np.linalg.norm(v1)

# square root of (4^2 + 5^2 + 6^2) = square root of (16+25+36) = square root of 14
np.linalg.norm(v2)

magnitude = np.linalg.norm(v1) * np.linalg.norm(v2)
magnitude

dot_product / magnitude

from scipy import spatial

result = 1 - spatial.distance.cosine(v1, v2)

result